%{ 
#include<stdio.h>
#include "ic.h"
FILE *yyin;
%}


%token Math String Import Standard FUNCTION RETURN
%token FOR WHILE IF ELSE DO COMMA BREAK
%token INT FLOAT CHAR STRING ID READ NUM
%token SOB SCB COB CCB CROB CRCB 
%token PLUS MINUS MULTIPLY DIVISON AND OR LT LTE GT GTE EQUALTO ASSIGNMENT SEMICOLON
%%


str: Program {return 0;} ;
Program:Import SOB Standard Library SCB Variable_Declaration_List Function_List {printf("0");} ;
Library: Math Library|String Library | Math |String ;
Variable_Declaration_List: Variable Variable_Declaration_List | Variable {printf("1");};
Variable: Type ID  {printf("2");};
Type:INT|FLOAT|CHAR|STRING {printf("3");};
Function_List: Function Function_List|Function  {printf("4");};
Function:  FUNCTION Type ID COB CCB Block{printf("5");} ;
Block:CROB Statement_List CRCB {printf("6");};
Statement_List: Statement Statement_List|Statement {printf("7");};
Statement: Variable_Declaration_List|Loop_Statement|READ COB ID CCB|ID ASSIGNMENT Arithmetic_Expression
 			| ID ASSIGNMENT Conditional_Expression | ID ASSIGNMENT Logical_Expression| Conditional_Statement 
            |Function_Call_Statement | RETURN ID | RETURN Conditional_Expression |RETURN NUM |RETURN Arithmetic_Expression|
            RETURN Logical_Expression| BREAK {printf("8");};
Loop_Statement: FOR COB ID ASSIGNMENT NUM SEMICOLON ID Conditional_Operator NUM SEMICOLON ID ASSIGNMENT ID Arithmetic_Operator NUM CCB Block
				|WHILE COB Conditional_Expression CCB Block|DO Block WHILE COB Conditional_Expression CCB {printf("9 ");} ;
Arithmetic_Operator : PLUS | MINUS | MULTIPLY| DIVISON |ASSIGNMENT {printf("10 ");} ;
Conditional_Operator :  LT|LTE|GT|GTE|EQUALTO {printf("11 ");};
Conditional_Expression : ID Conditional_Operator Arithmetic_Expression {printf("12 ");};
Arithmetic_Expression :ID Arithmetic_Operator Arithmetic_Expression | NUM |CROB Arithmetic_Expression CRCB | SOB Arithmetic_Expression SCB | COB Arithmetic_Expression CCB {printf("13 ");};
Logical_Expression:Conditional_Expression Logical_Operator Logical_Expression |Conditional_Expression {printf("14 ");};
Logical_Operator:AND|OR {printf("14 ");};
Conditional_Statement : IF COB Conditional_Expression CCB Block ELSE Block | IF COB Conditional_Expression CCB Block;
Function_Call_Statement :ID COB List_Of_Identifiers CCB|ID ASSIGNMENT ID COB List_Of_Identifiers CCB;
List_Of_Identifiers : NUM COMMA List_Of_Identifiers | ID COMMA List_Of_Identifiers | NUM |ID;
%%
#include "lex.yy.c"
main(int argc,char *argv[])
{ 
	yyin=fopen(argv[1],"r");
    if(!yyparse())

{printf("NO Compilation Error!!\n");}


}

yyerror(char *s) {
	printf("\n line No. %d : %s %s\n", yylineno, yytext,s );
}
int yywrap(void)
{
return 1;
}

